// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc				v4.24.3
// source: team.proto

package team

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamService_ListTeamIdsAndUUIDs_FullMethodName = "/team.TeamService/ListTeamIdsAndUUIDs"
	TeamService_ListTeams_FullMethodName		   = "/team.TeamService/ListTeams"
	TeamService_ListTeamsMetadata_FullMethodName   = "/team.TeamService/ListTeamsMetadata"
	TeamService_ListTeamsContent_FullMethodName	   = "/team.TeamService/ListTeamsContent"
	TeamService_GetTeam_FullMethodName			   = "/team.TeamService/GetTeam"
	TeamService_CreateTeam_FullMethodName		   = "/team.TeamService/CreateTeam"
	TeamService_UpdateTeam_FullMethodName		   = "/team.TeamService/UpdateTeam"
	TeamService_DeleteTeam_FullMethodName		   = "/team.TeamService/DeleteTeam"
	TeamService_GetTeamById_FullMethodName		   = "/team.TeamService/GetTeamById"
	TeamService_GetTeamByName_FullMethodName	   = "/team.TeamService/GetTeamByName"
	TeamService_GetTeamByEmail_FullMethodName	   = "/team.TeamService/GetTeamByEmail"
	TeamService_UpdateTeamMetadata_FullMethodName  = "/team.TeamService/UpdateTeamMetadata"
	TeamService_UpdateTeamContent_FullMethodName   = "/team.TeamService/UpdateTeamContent"
	TeamService_GetTeamMetadata_FullMethodName	   = "/team.TeamService/GetTeamMetadata"
	TeamService_GetTeamContent_FullMethodName	   = "/team.TeamService/GetTeamContent"
)

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	ListTeamIdsAndUUIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamIdUuid, error)
	ListTeams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsResponse, error)
	ListTeamsMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsMetadataResponse, error)
	ListTeamsContent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsContentResponse, error)
	GetTeam(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*Team, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	DeleteTeam(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeamByName(ctx context.Context, in *GetTeamByNameRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeamByEmail(ctx context.Context, in *GetTeamByEmailRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeamMetadata(ctx context.Context, in *UpdateTeamMetadataRequest, opts ...grpc.CallOption) (*TeamMetadataResponse, error)
	UpdateTeamContent(ctx context.Context, in *UpdateTeamContentRequest, opts ...grpc.CallOption) (*TeamContentResponse, error)
	GetTeamMetadata(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*TeamMetadataResponse, error)
	GetTeamContent(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*TeamContentResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) ListTeamIdsAndUUIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamIdUuid, error) {
	out := new(ListTeamIdUuid)
	err := c.cc.Invoke(ctx, TeamService_ListTeamIdsAndUUIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListTeams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsResponse, error) {
	out := new(ListTeamsResponse)
	err := c.cc.Invoke(ctx, TeamService_ListTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListTeamsMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsMetadataResponse, error) {
	out := new(ListTeamsMetadataResponse)
	err := c.cc.Invoke(ctx, TeamService_ListTeamsMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListTeamsContent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTeamsContentResponse, error) {
	out := new(ListTeamsContentResponse)
	err := c.cc.Invoke(ctx, TeamService_ListTeamsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeam(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_GetTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_UpdateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeam(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_DeleteTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_GetTeamById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByName(ctx context.Context, in *GetTeamByNameRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_GetTeamByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByEmail(ctx context.Context, in *GetTeamByEmailRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamService_GetTeamByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateTeamMetadata(ctx context.Context, in *UpdateTeamMetadataRequest, opts ...grpc.CallOption) (*TeamMetadataResponse, error) {
	out := new(TeamMetadataResponse)
	err := c.cc.Invoke(ctx, TeamService_UpdateTeamMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateTeamContent(ctx context.Context, in *UpdateTeamContentRequest, opts ...grpc.CallOption) (*TeamContentResponse, error) {
	out := new(TeamContentResponse)
	err := c.cc.Invoke(ctx, TeamService_UpdateTeamContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamMetadata(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*TeamMetadataResponse, error) {
	out := new(TeamMetadataResponse)
	err := c.cc.Invoke(ctx, TeamService_GetTeamMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamContent(ctx context.Context, in *GetTeamByUuidRequest, opts ...grpc.CallOption) (*TeamContentResponse, error) {
	out := new(TeamContentResponse)
	err := c.cc.Invoke(ctx, TeamService_GetTeamContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations must embed UnimplementedTeamServiceServer
// for forward compatibility
type TeamServiceServer interface {
	ListTeamIdsAndUUIDs(context.Context, *emptypb.Empty) (*ListTeamIdUuid, error)
	ListTeams(context.Context, *emptypb.Empty) (*ListTeamsResponse, error)
	ListTeamsMetadata(context.Context, *emptypb.Empty) (*ListTeamsMetadataResponse, error)
	ListTeamsContent(context.Context, *emptypb.Empty) (*ListTeamsContentResponse, error)
	GetTeam(context.Context, *GetTeamByUuidRequest) (*Team, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*Team, error)
	UpdateTeam(context.Context, *UpdateTeamRequest) (*Team, error)
	DeleteTeam(context.Context, *GetTeamByUuidRequest) (*Team, error)
	GetTeamById(context.Context, *GetTeamByIdRequest) (*Team, error)
	GetTeamByName(context.Context, *GetTeamByNameRequest) (*Team, error)
	GetTeamByEmail(context.Context, *GetTeamByEmailRequest) (*Team, error)
	UpdateTeamMetadata(context.Context, *UpdateTeamMetadataRequest) (*TeamMetadataResponse, error)
	UpdateTeamContent(context.Context, *UpdateTeamContentRequest) (*TeamContentResponse, error)
	GetTeamMetadata(context.Context, *GetTeamByUuidRequest) (*TeamMetadataResponse, error)
	GetTeamContent(context.Context, *GetTeamByUuidRequest) (*TeamContentResponse, error)
	mustEmbedUnimplementedTeamServiceServer()
}

// UnimplementedTeamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (UnimplementedTeamServiceServer) ListTeamIdsAndUUIDs(context.Context, *emptypb.Empty) (*ListTeamIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamIdsAndUUIDs not implemented")
}
func (UnimplementedTeamServiceServer) ListTeams(context.Context, *emptypb.Empty) (*ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedTeamServiceServer) ListTeamsMetadata(context.Context, *emptypb.Empty) (*ListTeamsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamsMetadata not implemented")
}
func (UnimplementedTeamServiceServer) ListTeamsContent(context.Context, *emptypb.Empty) (*ListTeamsContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamsContent not implemented")
}
func (UnimplementedTeamServiceServer) GetTeam(context.Context, *GetTeamByUuidRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedTeamServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServiceServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamServiceServer) DeleteTeam(context.Context, *GetTeamByUuidRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamById(context.Context, *GetTeamByIdRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamByName(context.Context, *GetTeamByNameRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamByEmail(context.Context, *GetTeamByEmailRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByEmail not implemented")
}
func (UnimplementedTeamServiceServer) UpdateTeamMetadata(context.Context, *UpdateTeamMetadataRequest) (*TeamMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMetadata not implemented")
}
func (UnimplementedTeamServiceServer) UpdateTeamContent(context.Context, *UpdateTeamContentRequest) (*TeamContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamContent not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamMetadata(context.Context, *GetTeamByUuidRequest) (*TeamMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMetadata not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamContent(context.Context, *GetTeamByUuidRequest) (*TeamContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamContent not implemented")
}
func (UnimplementedTeamServiceServer) mustEmbedUnimplementedTeamServiceServer() {}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_ListTeamIdsAndUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListTeamIdsAndUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_ListTeamIdsAndUUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListTeamIdsAndUUIDs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListTeams(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListTeamsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListTeamsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_ListTeamsMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListTeamsMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListTeamsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListTeamsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_ListTeamsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListTeamsContent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeam(ctx, req.(*GetTeamByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeam(ctx, req.(*GetTeamByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeamById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamById(ctx, req.(*GetTeamByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeamByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByName(ctx, req.(*GetTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeamByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByEmail(ctx, req.(*GetTeamByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateTeamMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateTeamMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_UpdateTeamMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateTeamMetadata(ctx, req.(*UpdateTeamMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateTeamContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateTeamContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_UpdateTeamContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateTeamContent(ctx, req.(*UpdateTeamContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeamMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamMetadata(ctx, req.(*GetTeamByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: TeamService_GetTeamContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamContent(ctx, req.(*GetTeamByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "team.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTeamIdsAndUUIDs",
			Handler:	_TeamService_ListTeamIdsAndUUIDs_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:	_TeamService_ListTeams_Handler,
		},
		{
			MethodName: "ListTeamsMetadata",
			Handler:	_TeamService_ListTeamsMetadata_Handler,
		},
		{
			MethodName: "ListTeamsContent",
			Handler:	_TeamService_ListTeamsContent_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:	_TeamService_GetTeam_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:	_TeamService_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:	_TeamService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:	_TeamService_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeamById",
			Handler:	_TeamService_GetTeamById_Handler,
		},
		{
			MethodName: "GetTeamByName",
			Handler:	_TeamService_GetTeamByName_Handler,
		},
		{
			MethodName: "GetTeamByEmail",
			Handler:	_TeamService_GetTeamByEmail_Handler,
		},
		{
			MethodName: "UpdateTeamMetadata",
			Handler:	_TeamService_UpdateTeamMetadata_Handler,
		},
		{
			MethodName: "UpdateTeamContent",
			Handler:	_TeamService_UpdateTeamContent_Handler,
		},
		{
			MethodName: "GetTeamMetadata",
			Handler:	_TeamService_GetTeamMetadata_Handler,
		},
		{
			MethodName: "GetTeamContent",
			Handler:	_TeamService_GetTeamContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team.proto",
}
