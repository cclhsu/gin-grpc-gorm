// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc				v4.24.3
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_ListUserIdsAndUUIDs_FullMethodName = "/user.UserService/ListUserIdsAndUUIDs"
	UserService_ListUsers_FullMethodName		   = "/user.UserService/ListUsers"
	UserService_ListUsersMetadata_FullMethodName   = "/user.UserService/ListUsersMetadata"
	UserService_ListUsersContent_FullMethodName	   = "/user.UserService/ListUsersContent"
	UserService_GetUser_FullMethodName			   = "/user.UserService/GetUser"
	UserService_CreateUser_FullMethodName		   = "/user.UserService/CreateUser"
	UserService_UpdateUser_FullMethodName		   = "/user.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName		   = "/user.UserService/DeleteUser"
	UserService_GetUserById_FullMethodName		   = "/user.UserService/GetUserById"
	UserService_GetUserByName_FullMethodName	   = "/user.UserService/GetUserByName"
	UserService_GetUserByEmail_FullMethodName	   = "/user.UserService/GetUserByEmail"
	UserService_UpdateUserMetadata_FullMethodName  = "/user.UserService/UpdateUserMetadata"
	UserService_UpdateUserContent_FullMethodName   = "/user.UserService/UpdateUserContent"
	UserService_GetUserMetadata_FullMethodName	   = "/user.UserService/GetUserMetadata"
	UserService_GetUserContent_FullMethodName	   = "/user.UserService/GetUserContent"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	ListUserIdsAndUUIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserIdUuid, error)
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error)
	ListUsersMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersMetadataResponse, error)
	ListUsersContent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersContentResponse, error)
	GetUser(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*User, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByName(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUserMetadata(ctx context.Context, in *UpdateUserMetadataRequest, opts ...grpc.CallOption) (*UserMetadataResponse, error)
	UpdateUserContent(ctx context.Context, in *UpdateUserContentRequest, opts ...grpc.CallOption) (*UserContentResponse, error)
	GetUserMetadata(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*UserMetadataResponse, error)
	GetUserContent(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*UserContentResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ListUserIdsAndUUIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserIdUuid, error) {
	out := new(ListUserIdUuid)
	err := c.cc.Invoke(ctx, UserService_ListUserIdsAndUUIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsersMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersMetadataResponse, error) {
	out := new(ListUsersMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsersMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsersContent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersContentResponse, error) {
	out := new(ListUsersContentResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsersContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByName(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserMetadata(ctx context.Context, in *UpdateUserMetadataRequest, opts ...grpc.CallOption) (*UserMetadataResponse, error) {
	out := new(UserMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserContent(ctx context.Context, in *UpdateUserContentRequest, opts ...grpc.CallOption) (*UserContentResponse, error) {
	out := new(UserContentResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserMetadata(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*UserMetadataResponse, error) {
	out := new(UserMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserContent(ctx context.Context, in *GetUserByUuidRequest, opts ...grpc.CallOption) (*UserContentResponse, error) {
	out := new(UserContentResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	ListUserIdsAndUUIDs(context.Context, *emptypb.Empty) (*ListUserIdUuid, error)
	ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error)
	ListUsersMetadata(context.Context, *emptypb.Empty) (*ListUsersMetadataResponse, error)
	ListUsersContent(context.Context, *emptypb.Empty) (*ListUsersContentResponse, error)
	GetUser(context.Context, *GetUserByUuidRequest) (*User, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	DeleteUser(context.Context, *GetUserByUuidRequest) (*User, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*User, error)
	GetUserByName(context.Context, *GetUserByUsernameRequest) (*User, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error)
	UpdateUserMetadata(context.Context, *UpdateUserMetadataRequest) (*UserMetadataResponse, error)
	UpdateUserContent(context.Context, *UpdateUserContentRequest) (*UserContentResponse, error)
	GetUserMetadata(context.Context, *GetUserByUuidRequest) (*UserMetadataResponse, error)
	GetUserContent(context.Context, *GetUserByUuidRequest) (*UserContentResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) ListUserIdsAndUUIDs(context.Context, *emptypb.Empty) (*ListUserIdUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIdsAndUUIDs not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) ListUsersMetadata(context.Context, *emptypb.Empty) (*ListUsersMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersMetadata not implemented")
}
func (UnimplementedUserServiceServer) ListUsersContent(context.Context, *emptypb.Empty) (*ListUsersContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersContent not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserByUuidRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *GetUserByUuidRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserById(context.Context, *GetUserByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) GetUserByName(context.Context, *GetUserByUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedUserServiceServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserMetadata(context.Context, *UpdateUserMetadataRequest) (*UserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMetadata not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserContent(context.Context, *UpdateUserContentRequest) (*UserContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserContent not implemented")
}
func (UnimplementedUserServiceServer) GetUserMetadata(context.Context, *GetUserByUuidRequest) (*UserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMetadata not implemented")
}
func (UnimplementedUserServiceServer) GetUserContent(context.Context, *GetUserByUuidRequest) (*UserContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContent not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_ListUserIdsAndUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUserIdsAndUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_ListUserIdsAndUUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUserIdsAndUUIDs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsersMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsersMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_ListUsersMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsersMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsersContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsersContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_ListUsersContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsersContent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*GetUserByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUserByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByName(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_UpdateUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserMetadata(ctx, req.(*UpdateUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_UpdateUserContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserContent(ctx, req.(*UpdateUserContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserMetadata(ctx, req.(*GetUserByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:		srv,
		FullMethod: UserService_GetUserContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserContent(ctx, req.(*GetUserByUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserIdsAndUUIDs",
			Handler:	_UserService_ListUserIdsAndUUIDs_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:	_UserService_ListUsers_Handler,
		},
		{
			MethodName: "ListUsersMetadata",
			Handler:	_UserService_ListUsersMetadata_Handler,
		},
		{
			MethodName: "ListUsersContent",
			Handler:	_UserService_ListUsersContent_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:	_UserService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:	_UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:	_UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:	_UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:	_UserService_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:	_UserService_GetUserByName_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:	_UserService_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUserMetadata",
			Handler:	_UserService_UpdateUserMetadata_Handler,
		},
		{
			MethodName: "UpdateUserContent",
			Handler:	_UserService_UpdateUserContent_Handler,
		},
		{
			MethodName: "GetUserMetadata",
			Handler:	_UserService_GetUserMetadata_Handler,
		},
		{
			MethodName: "GetUserContent",
			Handler:	_UserService_GetUserContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
